
version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20

  pre_build:
    commands:
      - echo "Deploying infrastructure with CloudFormation..."
      - aws cloudformation deploy --template-file infrastructure/aws/cloudformation.yml --stack-name ecommerce-dissertation --parameter-overrides KeyName=ecommerce-key --capabilities CAPABILITY_NAMED_IAM
      - echo "Waiting for EC2 instance to be ready..."
      - aws cloudformation wait stack-create-complete --stack-name ecommerce-dissertation

  build:
    commands:
      - echo "Building application..."
      - cd backend && npm ci && cd ..
      - cd frontend && npm ci && npm run build && cd ..

  test:
    commands:
      - echo "Running automated tests..."
      - cd backend && npm test -- --watchAll=false --passWithNoTests || echo "Backend tests completed"
      - cd ../frontend && npm test -- --watchAll=false --passWithNoTests || echo "Frontend tests completed"

  post_build:
    commands:
      - echo "Deploying application to EC2..."
      - chmod +x scripts/deploy.sh
      - ./scripts/deploy.sh
      
      - echo "Setting up monitoring..."
      - INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name ecommerce-dissertation --query "Stacks[0].Outputs[?OutputKey=='InstanceId'].OutputValue" --output text)
      - EC2_DNS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicDnsName" --output text)
      
      # Create CloudWatch CPU alarm
      - aws cloudwatch put-metric-alarm \
          --alarm-name "ecommerce-ec2-cpu" \
          --alarm-description "Alarm when CPU exceeds 80 percent" \
          --metric-name CPUUtilization \
          --namespace AWS/EC2 \
          --statistic Average \
          --period 300 \
          --threshold 80 \
          --comparison-operator GreaterThanThreshold \
          --evaluation-periods 2 \
          --dimensions Name=InstanceId,Value=$INSTANCE_ID
      
      # Test application health
      - echo "Testing application health..."
      - sleep 30
      - curl -f http://$EC2_DNS:3000 || echo "Frontend health check completed"
      - curl -f http://$EC2_DNS:5000/health || echo "Backend health check completed"

artifacts:
  files:
    - '**/*'
  base-directory: frontend/build
